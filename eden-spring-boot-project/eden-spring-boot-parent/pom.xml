<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<artifactId>eden-spring-boot-parent</artifactId>
	<packaging>pom</packaging>
	<name>eden-spring-boot-parent</name>
	<description>Eden* Spring Boot Parent</description>

	<parent>
		<groupId>org.ylzl</groupId>
		<artifactId>eden-spring-boot-dependencies</artifactId>
		<version>2.0.0.RELEASE</version>
		<relativePath>../eden-spring-boot-dependencies</relativePath>
	</parent>

	<properties>
		<!-- 插件版本 -->
		<asciidoctor-maven-plugin.version>2.0.0</asciidoctor-maven-plugin.version>
		<build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>
		<cargo-maven2-plugin.version>1.7.9</cargo-maven2-plugin.version>
		<dependency-check-maven.version>3.3.1</dependency-check-maven.version>
		<dockerfile-maven-plugin.version>1.4.3</dockerfile-maven-plugin.version>
		<exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>
		<flatten-maven-plugin.version>1.1.0</flatten-maven-plugin.version>
		<flyway-maven-plugin.version>${flyway.version}</flyway-maven-plugin.version>
		<frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>
		<gatling-maven-plugin.version>3.0.3</gatling-maven-plugin.version>
		<git-commit-id-plugin.version>3.0.1</git-commit-id-plugin.version>
		<infinispan-protocol-parser-generator-maven-plugin.version>${infinispan.version}</infinispan-protocol-parser-generator-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.1</jacoco-maven-plugin.version>
		<javassist.version>3.26.0-GA</javassist.version>
		<jib-maven-plugin.version>2.2.0</jib-maven-plugin.version>
		<johnzon-maven-plugin.version>${johnzon.version}</johnzon-maven-plugin.version>
		<jooq-codegen-maven.version>${jooq.version}</jooq-codegen-maven.version>
		<kotlin-maven-plugin.version>${kotlin.version}</kotlin-maven-plugin.version>
		<liquibase-maven-plugin.version>3.5.5</liquibase-maven-plugin.version>
		<maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
		<maven-assembly-plugin.version>3.2.0</maven-assembly-plugin.version>
		<maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven-dependency-plugin.version>3.1.1</maven-dependency-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-enforcer-plugin.version>3.0.0-M3</maven-enforcer-plugin.version>
		<maven-failsafe-plugin.version>3.0.0-M3</maven-failsafe-plugin.version>
		<maven-idea-plugin.version>2.2.1</maven-idea-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-invoker-plugin.version>3.2.1</maven-invoker-plugin.version>
		<maven-help-plugin.version>3.2.0</maven-help-plugin.version>
		<maven-jar-plugin.version>3.1.2</maven-jar-plugin.version>
		<maven-javadoc-plugin.version>3.1.1</maven-javadoc-plugin.version>
		<maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
		<maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
		<maven-shade-plugin.version>3.2.1</maven-shade-plugin.version>
		<maven-site-plugin.version>3.8.2</maven-site-plugin.version>
		<maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.2.3</maven-war-plugin.version>
		<openapi-generator-maven-plugin.version>3.0.1</openapi-generator-maven-plugin.version>
		<plantuml-generator-maven-plugin.version>0.9.1</plantuml-generator-maven-plugin.version>
		<plantuml-maven-plugin.version>1.2</plantuml-maven-plugin.version>
		<properties-maven-plugin>1.0.0</properties-maven-plugin>
		<scala-maven-plugin.version>3.4.6</scala-maven-plugin.version>
		<sonar-maven-plugin.version>3.4.1.1168</sonar-maven-plugin.version>
		<spring-boot-maven-plugin.version>${spring-boot.version}</spring-boot-maven-plugin.version>
		<swagger2markup-maven-plugin.version>1.3.7</swagger2markup-maven-plugin.version>
		<versions-maven-plugin.version>2.7</versions-maven-plugin.version>
		<wrapper-maven-plugin.version>0.0.5</wrapper-maven-plugin.version>
		<xml-maven-plugin.version>1.0.2</xml-maven-plugin.version>
		<yaml-properties-maven-plugin.version>1.1.3</yaml-properties-maven-plugin.version>

		<!-- 插件属性 -->
		<asciidoctor.generated.directory>${project.build.directory}/asciidoc/generated</asciidoctor.generated.directory>
		<asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
		<asciidoctor.input.directory>${project.basedir}/src/docs/asciidoc</asciidoctor.input.directory>
		<asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>
		<asciidoctorj-diagram.version>1.5.18</asciidoctorj-diagram.version>
		<asciidoctorj-pdf.version>1.5.0-alpha.10.1</asciidoctorj-pdf.version>
		<gatling.configFolder>${project.basedir}/src/test/gatling/conf</gatling.configFolder>
		<graphvizDot/>
		<jacoco.reportFolder>${project.build.directory}/jacoco</jacoco.reportFolder>
		<jacoco.utReportFile>${jacoco.reportFolder}/test.exec</jacoco.utReportFile>
		<jacoco.itReportFile>${jacoco.reportFolder}/integrationTest.exec</jacoco.itReportFile>
		<jruby-complete.version>1.7.26</jruby-complete.version>
		<junit.utReportFolder>${project.testresult.directory}/test</junit.utReportFolder>
		<junit.itReportFolder>${project.testresult.directory}/integrationTest</junit.itReportFolder>
		<liquibase.domain/>
		<liquibase-hibernate5.version>3.8</liquibase-hibernate5.version>
		<maven.version>3.0.0</maven.version>
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
		<node.version>v8.11.3</node.version>
		<plantuml.home/>
		<plantuml.version>8059</plantuml.version>
		<plantuml.output.directory>${project.build.directory}/plantuml</plantuml.output.directory>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
		<server.url/>
		<simulationClass/>
		<sonar.exclusions>src/main/webapp/content/**/*.*, src/main/webapp/i18n/*.js, target/classes/static/**/*.*, target/classes/static/**/*.*
		</sonar.exclusions>
		<sonar.host.url>http://localhost:9000</sonar.host.url>
		<sonar.issue.ignore.multicriteria>S3437,S4684,UndocumentedApi,BoldAndItalicTagsCheck</sonar.issue.ignore.multicriteria>
		<sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.resourceKey>src/main/webapp/app/**/*.*</sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.resourceKey>
		<sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.ruleKey>Web:BoldAndItalicTagsCheck</sonar.issue.ignore.multicriteria.BoldAndItalicTagsCheck.ruleKey>
		<sonar.issue.ignore.multicriteria.S3437.resourceKey>src/main/java/**/*</sonar.issue.ignore.multicriteria.S3437.resourceKey>
		<sonar.issue.ignore.multicriteria.S3437.ruleKey>squid:S3437</sonar.issue.ignore.multicriteria.S3437.ruleKey>
		<sonar.issue.ignore.multicriteria.UndocumentedApi.resourceKey>src/main/java/**/*</sonar.issue.ignore.multicriteria.UndocumentedApi.resourceKey>
		<sonar.issue.ignore.multicriteria.UndocumentedApi.ruleKey>squid:UndocumentedApi</sonar.issue.ignore.multicriteria.UndocumentedApi.ruleKey>
		<sonar.issue.ignore.multicriteria.S4684.resourceKey>src/main/java/**/*</sonar.issue.ignore.multicriteria.S4684.resourceKey>
		<sonar.issue.ignore.multicriteria.S4684.ruleKey>squid:S4684</sonar.issue.ignore.multicriteria.S4684.ruleKey>
		<sonar.jacoco.reportPaths>${project.build.directory}/jacoco/test.exec,${project.build.directory}/jacoco/integrationTest.exec</sonar.jacoco.reportPaths>
		<sonar.java.codeCoveragePlugin>jacoco</sonar.java.codeCoveragePlugin>
		<sonar.junit.reportPaths>${project.build.directory}/test-results/test,${project.build.directory}/test-results/integrationTest</sonar.junit.reportPaths>
		<sonar.projectKey>${project.name}</sonar.projectKey>
		<sonar.projectName>${project.description}</sonar.projectName>
		<sonar.projectVersion>${project.version}</sonar.projectVersion>
		<sonar.sources>src/main/</sonar.sources>
		<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
		<sonar.testExecutionReportPaths>${project.build.directory}/test-results/jest/TESTS-results-sonar.xml</sonar.testExecutionReportPaths>
		<sonar.tests>src/test/</sonar.tests>
		<sonar.typescript.lcov.reportPaths>${project.build.directory}/test-results/lcov.info</sonar.typescript.lcov.reportPaths>
		<spring.datasource.driver/>
		<spring.datasource.url/>
		<spring.datasource.username/>
		<spring.datasource.password/>
		<spring.jpa.database-platform/>
		<spring.jpa.naming.physical-strategy/>
		<spring.jpa.naming.implicit-strategy/>
		<spring.profiles.active/>
		<start-class/>
		<swagger2markup-extensions.version>1.3.3</swagger2markup-extensions.version>
		<swagger.input>${server.url}/v2/api-docs</swagger.input>
		<swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
		<swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
		<timestamp>${maven.build.timestamp}</timestamp>
		<validation-api.version>1.1.0.Final</validation-api.version>
		<yarn.version>v1.9.2</yarn.version>
	</properties>

	<build>
		<defaultGoal>spring-boot:run</defaultGoal>
		<finalName>${project.name}</finalName>
		<testSourceDirectory>src/test/scala</testSourceDirectory>
		<pluginManagement>
			<!-- 相同的 phase 按引入顺序执行 -->
			<plugins>
				<plugin>
					<groupId>com.github.jeluard</groupId>
					<artifactId>plantuml-maven-plugin</artifactId>
					<version>${plantuml-maven-plugin.version}</version>
					<configuration>
						<graphvizDot>${graphvizDot}</graphvizDot>
						<sourceFiles>
							<directory>${plantuml.output.directory}</directory>
							<includes>
								<include>**/*.puml</include>
							</includes>
						</sourceFiles>
					</configuration>
					<executions>
						<execution>
							<id>plantuml-generate</id>
							<phase>pre-site</phase>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>net.sourceforge.plantuml</groupId>
							<artifactId>plantuml</artifactId>
							<version>${plantuml.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>jib-maven-plugin</artifactId>
					<version>${jib-maven-plugin.version}</version>
					<configuration>
						<from>
							<image>openjdk:8-jre-alpine</image>
						</from>
						<to>
							<image>${project.name}:${project.version}</image>
							<tags>
								<tag>${project.version}</tag>
							</tags>
						</to>
						<container>
							<entrypoint>
								<shell>/bin/sh</shell>
								<option>-c</option>
								<arg>/entrypoint.sh</arg>
							</entrypoint>
							<ports>
								<port>8081</port>
								<port>5701/udp</port>
							</ports>
							<environment>
								<SPRING_OUTPUT_ANSI_ENABLED>ALWAYS</SPRING_OUTPUT_ANSI_ENABLED>
								<RUN_SLEEP>0</RUN_SLEEP>
							</environment>
							<creationTime>USE_CURRENT_TIMESTAMP</creationTime>
						</container>
						<extraDirectories>
							<paths>src/main/docker</paths>
							<permissions>
								<permission>
									<file>/entrypoint.sh</file>
									<mode>755</mode>
								</permission>
							</permissions>
						</extraDirectories>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.rimerosolutions.maven.plugins</groupId>
					<artifactId>wrapper-maven-plugin</artifactId>
					<version>${wrapper-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>dockerfile-maven-plugin</artifactId>
					<version>${dockerfile-maven-plugin.version}</version>
					<configuration>
						<repository>${project.name}</repository>
						<tag>${project.version}</tag>
						<contextDirectory>${project.build.directory}</contextDirectory>
					</configuration>
				</plugin>
				<plugin>
					<groupId>de.elnarion.maven</groupId>
					<artifactId>plantuml-generator-maven-plugin</artifactId>
					<version>${plantuml-generator-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>io.gatling</groupId>
					<artifactId>gatling-maven-plugin</artifactId>
					<version>${gatling-maven-plugin.version}</version>
					<configuration>
						<disableCompiler>true</disableCompiler>
						<propagateSystemProperties>true</propagateSystemProperties>
						<failOnError>true</failOnError>
						<runMultipleSimulations>true</runMultipleSimulations>
					</configuration>
				</plugin>
				<plugin>
					<groupId>io.github.swagger2markup</groupId>
					<artifactId>swagger2markup-maven-plugin</artifactId>
					<version>${swagger2markup-maven-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>io.github.swagger2markup</groupId>
							<artifactId>swagger2markup-import-files-ext</artifactId>
							<version>${swagger2markup-extensions.version}</version>
						</dependency>
						<dependency>
							<groupId>io.github.swagger2markup</groupId>
							<artifactId>swagger2markup-spring-restdocs-ext</artifactId>
							<version>${swagger2markup-extensions.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<swaggerInput>${swagger.input}</swaggerInput>
						<outputDir>${asciidoctor.generated.directory}</outputDir>
						<config>
							<swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
							<swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
							<swagger2markup.extensions.dynamicOverview.contentPath>
								${project.basedir}/src/docs/asciidoc/extensions/overview
							</swagger2markup.extensions.dynamicOverview.contentPath>
							<swagger2markup.extensions.dynamicDefinitions.contentPath>
								${project.basedir}/src/docs/asciidoc/extensions/definitions
							</swagger2markup.extensions.dynamicDefinitions.contentPath>
							<swagger2markup.extensions.dadmynamicPaths.contentPath>
								${project.basedir}/src/docs/asciidoc/extensions/paths
							</swagger2markup.extensions.dadmynamicPaths.contentPath>
							<swagger2markup.extensions.dynamicSecurity.contentPath>
								${project.basedir}/src/docs/asciidoc/extensions/security
							</swagger2markup.extensions.dynamicSecurity.contentPath>
							<swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}
							</swagger2markup.extensions.springRestDocs.snippetBaseUri>
							<swagger2markup.extensions.springRestDocs.defaultSnippets>true
							</swagger2markup.extensions.springRestDocs.defaultSnippets>
						</config>
					</configuration>
					<executions>
						<execution>
							<id>swagger2markup-maven-plugin-convertSwagger2markup</id>
							<phase>pre-site</phase>
							<goals>
								<goal>convertSwagger2markup</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>it.ozimov</groupId>
					<artifactId>yaml-properties-maven-plugin</artifactId>
					<version>${yaml-properties-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>yaml-read-project-properties</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>read-project-properties</goal>
							</goals>
							<configuration>
								<files>
									<file>${project.build.outputDirectory}/config/application-${spring.profiles.active}.yml</file>
								</files>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>net.alchim31.maven</groupId>
					<artifactId>scala-maven-plugin</artifactId>
					<version>${scala-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>scala-testCompile</id>
							<goals>
								<goal>testCompile</goal>
							</goals>
							<configuration>
								<jvmArgs>
									<jvmArg>-Xss100M</jvmArg>
								</jvmArgs>
								<args>
									<arg>-target:jvm-1.8</arg>
									<arg>-deprecation</arg>
									<arg>-feature</arg>
									<arg>-unchecked</arg>
									<arg>-language:implicitConversions</arg>
									<arg>-language:postfixOps</arg>
								</args>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.johnzon</groupId>
					<artifactId>johnzon-maven-plugin</artifactId>
					<version>${johnzon-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${maven-antrun-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin.version}</version>
					<configuration>
						<ignoreMissingDescriptor>true</ignoreMissingDescriptor>
						<descriptors>
							<descriptor>src/main/assembly/assembly.xml</descriptor>
						</descriptors>
					</configuration>
					<executions>
						<execution>
							<id>assembly-single</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<annotationProcessorPaths>
							<path>
								<groupId>org.hibernate</groupId>
								<artifactId>hibernate-jpamodelgen</artifactId>
								<version>${hibernate.version}</version>
							</path>
							<path>
								<groupId>org.projectlombok</groupId>
								<artifactId>lombok</artifactId>
								<version>${lombok.version}</version>
							</path>
							<path>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${mapstruct.version}</version>
							</path>
							<path>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-configuration-processor</artifactId>
								<version>${spring-boot.version}</version>
							</path>
						</annotationProcessorPaths>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<encoding>${project.build.sourceEncoding}</encoding>
						<showWarnings>false</showWarnings>
						<compilerArgs>
							<arg>-Xlint</arg>
						</compilerArgs>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${maven-eclipse-plugin.version}</version>
					<configuration>
						<downloadSources>true</downloadSources>
						<downloadJavadocs>true</downloadJavadocs>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforcer-enforce</id>
							<phase>validate</phase>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
						<!--<execution>
							<id>enforce-dependencyConvergence</id>
							<configuration>
								<rules>
									<DependencyConvergence/>
								</rules>
								<fail>false</fail>
							</configuration>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>-->
					</executions>
					<configuration>
						<rules>
							<requireMavenVersion>
								<message>You are running an older version of Maven. Application requires at least Maven ${maven.version}</message>
								<version>[${maven.version},)</version>
							</requireMavenVersion>
							<requireJavaVersion>
								<message>You are running an incompatible version of Java.Application requires at least JDK ${java.version}</message>
								<version>[${java.version},13)</version>
							</requireJavaVersion>
						</rules>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
					<configuration>
						<updateReleaseInfo>true</updateReleaseInfo>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<configuration>
						<classesDirectory>${project.build.outputDirectory}</classesDirectory>
						<runOrder>alphabetical</runOrder>
						<reportsDirectory>${junit.itReportFolder}</reportsDirectory>
						<includes>
							<include>**/*IT*</include>
							<include>**/*IntTest*</include>
						</includes>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<phase>integration-test</phase>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-help-plugin</artifactId>
					<version>${maven-help-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-idea-plugin</artifactId>
					<version>${maven-idea-plugin.version}</version>
					<configuration>
						<exclude>node_modules</exclude>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-invoker-plugin</artifactId>
					<version>${maven-invoker-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
					<configuration>
						<excludes>
							<exclude>**/rebel.xml</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<source>8</source>
					</configuration>
					<executions>
						<execution>
							<id>javadoc-jar</id>
							<phase>pre-site</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-project-info-reports-plugin</artifactId>
					<version>${maven-project-info-reports-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<executions>
						<execution>
							<id>resources-copy-resources</id>
							<phase>process-resources</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>target/classes</outputDirectory>
								<useDefaultDelimiters>false</useDefaultDelimiters>
								<delimiters>
									<delimiter>#</delimiter>
								</delimiters>
								<resources>
									<resource>
										<directory>src/main/resources</directory>
										<filtering>true</filtering>
										<includes>
											<include>**/*.properties</include>
											<exclude>**/*.yml</exclude>
										</includes>
									</resource>
									<resource>
										<directory>src/main/resources</directory>
										<filtering>false</filtering>
										<excludes>
											<exclude>**/*.properties</exclude>
											<exclude>**/*.yml</exclude>
										</excludes>
									</resource>
								</resources>
							</configuration>
						</execution>
						<execution>
							<id>resources-docker-resources</id>
							<phase>process-resources</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>target/</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/docker</directory>
										<filtering>false</filtering>
										<excludes>
											<exclude>**/*.yml</exclude>
										</excludes>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>${maven-shade-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven-site-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<runOrder>alphabetical</runOrder>
						<reportsDirectory>${junit.utReportFolder}</reportsDirectory>
						<excludes>
							<exclude>**/*IT*</exclude>
							<exclude>**/*IntTest*</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>${maven-war-plugin.version}</version>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<archive>
							<manifest>
								<mainClass>${start-class}</mainClass>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							</manifest>
						</archive>
						<packagingExcludes>WEB-INF/lib/*.jar</packagingExcludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.asciidoctor</groupId>
					<artifactId>asciidoctor-maven-plugin</artifactId>
					<version>${asciidoctor-maven-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>org.asciidoctor</groupId>
							<artifactId>asciidoctorj-pdf</artifactId>
							<version>${asciidoctorj-pdf.version}</version>
						</dependency>
						<dependency>
							<groupId>org.jruby</groupId>
							<artifactId>jruby-complete</artifactId>
							<version>${jruby-complete.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
						<sourceDocumentName>index.adoc</sourceDocumentName>
						<attributes>
							<doctype>book</doctype>
							<toc>left</toc>
							<toclevels>3</toclevels>
							<generated>${asciidoctor.generated.directory}</generated>
						</attributes>
					</configuration>
					<executions>
						<execution>
							<id>asciidoctor-html-process-asciidoc</id>
							<phase>pre-site</phase>
							<goals>
								<goal>process-asciidoc</goal>
							</goals>
							<configuration>
								<backend>html5</backend>
								<outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
							</configuration>
						</execution>
						<execution>
							<id>asciidoctor-pdf-process-asciidoc</id>
							<phase>pre-site</phase>
							<goals>
								<goal>process-asciidoc</goal>
							</goals>
							<configuration>
								<backend>pdf</backend>
								<outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>${cargo-maven2-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<version>${flatten-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>${properties-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>properties-read-project-properties</id>
							<phase>process-resources</phase>
							<goals>
								<goal>read-project-properties</goal>
							</goals>
							<configuration>
								<files>
									<file>${project.build.outputDirectory}/*.properties</file>
								</files>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.flywaydb</groupId>
					<artifactId>flyway-maven-plugin</artifactId>
					<version>${flyway-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.infinispan</groupId>
					<artifactId>infinispan-protocol-parser-generator-maven-plugin</artifactId>
					<version>${infinispan-protocol-parser-generator-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>jacoco-prepare-agent</id>
							<phase>test</phase>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
							<configuration>
								<destFile>${jacoco.utReportFile}</destFile>
							</configuration>
						</execution>
						<execution>
							<id>jacoco-report</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
							<configuration>
								<dataFile>${jacoco.utReportFile}</dataFile>
								<outputDirectory>${jacoco.reportFolder}</outputDirectory>
							</configuration>
						</execution>
						<execution>
							<id>jacoco-prepare-agent-integration</id>
							<phase>pre-integration-test</phase>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
							<configuration>
								<destFile>${jacoco.itReportFile}</destFile>
							</configuration>
						</execution>
						<execution>
							<id>jacoco-report-integration</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>report-integration</goal>
							</goals>
							<configuration>
								<dataFile>${jacoco.itReportFile}</dataFile>
								<outputDirectory>${jacoco.reportFolder}</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.jetbrains.kotlin</groupId>
					<artifactId>kotlin-maven-plugin</artifactId>
					<version>${kotlin-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.jooq</groupId>
					<artifactId>jooq-codegen-maven</artifactId>
					<version>${jooq-codegen-maven.version}</version>
				</plugin>
				<plugin>
					<groupId>org.liquibase</groupId>
					<artifactId>liquibase-maven-plugin</artifactId>
					<version>${liquibase-maven-plugin.version}</version>
					<configuration>
						<changeLogFile>src/main/resources/config/liquibase/master.xml</changeLogFile>
						<outputChangeLogFile>
							src/main/resources/config/liquibase/changelog/${maven.build.timestamp}.xml
						</outputChangeLogFile>
						<diffChangeLogFile>
							src/main/resources/config/liquibase/changelog/${maven.build.timestamp}.xml
						</diffChangeLogFile>
						<driver>${spring.datasource.driver}</driver>
						<url>${spring.datasource.url}</url>
						<username>${spring.datasource.username}</username>
						<password>${spring.datasource.password}</password>
						<referenceUrl>
							hibernate:spring:${liquibase.domain}?dialect=${spring.jpa.database-platform}&amp;hibernate.physical_naming_strategy=${spring.jpa.naming.physical-strategy}&amp;hibernate.implicit_naming_strategy=${spring.jpa.naming.implicit-strategy}
						</referenceUrl>
						<verbose>true</verbose>
						<logging>debug</logging>
						<contexts>!test</contexts>
					</configuration>
					<executions>
						<execution>
							<id>liquibase-dbDoc</id>
							<phase>pre-site</phase>
							<goals>
								<goal>dbDoc</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>org.javassist</groupId>
							<artifactId>javassist</artifactId>
							<version>${javassist.version}</version>
						</dependency>
						<dependency>
							<groupId>org.liquibase</groupId>
							<artifactId>liquibase-core</artifactId>
							<version>${liquibase.version}</version>
						</dependency>
						<dependency>
							<groupId>org.liquibase.ext</groupId>
							<artifactId>liquibase-hibernate5</artifactId>
							<version>${liquibase-hibernate5.version}</version>
						</dependency>
						<dependency>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-starter-data-jpa</artifactId>
							<version>${spring-boot.version}</version>
						</dependency>
						<dependency>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>${validation-api.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.owasp</groupId>
					<artifactId>dependency-check-maven</artifactId>
					<version>${dependency-check-maven.version}</version>
					<executions>
						<execution>
							<id>dependency-check</id>
							<phase>validate</phase>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring-boot-maven-plugin.version}</version>
					<configuration>
						<executable>true</executable>
						<fork>true</fork>
						<mainClass>${start-class}</mainClass>
					</configuration>
					<executions>
						<execution>
							<id>spring-boot-build-repackage</id>
							<goals>
								<goal>build-info</goal>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>pl.project13.maven</groupId>
					<artifactId>git-commit-id-plugin</artifactId>
					<version>${git-commit-id-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<plugins>

		</plugins>
	</reporting>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring-framework.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.integration</groupId>
				<artifactId>spring-integration-bom</artifactId>
				<version>${spring-integration.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.dubbo</groupId>
				<artifactId>dubbo-dependencies-bom</artifactId>
				<version>${dubbo.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
				<spring.devtools.restart.enabled>true</spring.devtools.restart.enabled>
				<spring.devtools.livereload.enabled>true</spring.devtools.livereload.enabled>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
				<spring.devtools.restart.enabled>false</spring.devtools.restart.enabled>
				<spring.devtools.livereload.enabled>false</spring.devtools.livereload.enabled>
			</properties>
		</profile>

		<profile>
			<id>assembly</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>docker</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>com.google.cloud.tools</groupId>
						<artifactId>jib-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jacoco</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>sonar</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
